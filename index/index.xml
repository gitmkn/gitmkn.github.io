<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Indices on IaC</title>
    <link>https://gitmkn.github.io/index/</link>
    <description>Recent content in Indices on IaC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright © 2023, arunma.cn; all rights reserved.</copyright>
    <lastBuildDate>Sun, 26 Nov 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://gitmkn.github.io/index/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Packer自定义插件使用</title>
      <link>https://gitmkn.github.io/index/packer_plugin_customize/</link>
      <pubDate>Sun, 26 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://gitmkn.github.io/index/packer_plugin_customize/</guid>
      <description>测试使用，不可用于生产环境
1、 自定义插件 根据代码构建插件包
Linux GOOS=linux GOARCH=amd64 go build -o packer-plugin-tencentcloud-linux-amd64 main.go GOOS=linux GOARCH=arm64 go build -o packer-plugin-tencentcloud-linux-arm64 main.go MAC GOOS=darwin GOARCH=amd64 go build -o packer-plugin-tencentcloud-darwin-amd64 main.go GOOS=darwin GOARCH=arm64 go build -o packer-plugin-tencentcloud-darwin-arm64 main.go WIN GOOS=windows GOARCH=amd64 go build -o packer-plugin-tencentcloud-linux-windows-amd64.exe main.go GOOS=windows GOARCH=arm64 go build -o packer-plugin-tencentcloud-linux-windows-arm64.exe main.go 2、 选择执行机操作系统对应的插件包 Linux/MAC uname -a WIN 自行查询解决 3、 配置插件包路径 export PACKER_PLUGIN_PATH=${插件包路径} 4、 插件授权可执行权限 chmod a+x ${插件包路径}${插件名} 5、 开启日志 export PACKER_LOG=1 export PACKER_LOG_PATH=&amp;#34;packer.</description>
    </item>
    <item>
      <title>Packer插件字段说明</title>
      <link>https://gitmkn.github.io/index/packer_plugin_param/</link>
      <pubDate>Fri, 24 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://gitmkn.github.io/index/packer_plugin_param/</guid>
      <description>翻译来源于AI
必输字段 参数名 类型 描述 secret_id string 腾讯云的 Secret ID。您可以直接设置它，或设置 TENCENTCLOUD_SECRET_ID 环境变量。 secret_key string 腾讯云的 Secret Key。您可以直接设置它，或设置 TENCENTCLOUD_SECRET_KEY 环境变量。 region string 您要启动 CVM 的地区。您应参考区域和可用区参数。 zone string 您要启动 CVM 的可用区。您应参考区域和可用区参数。 instance_type string 您要启动 CVM 的实例类型。您应参考实例类型参数。 image_name string 您要创建的自定义镜像名称，它应由不超过60个字符的字母、数字或减号组成。 可选字段 参数名 类型 描述 cvm_endpoint string 连接云端点，如果是 TCE 云，则应设置为 TCE CVM 端点。 vpc_endpoint string 连接云端点，如果是 TCE 云，则应设置为 TCE VPC 端点。 security_token string STS 访问令牌，可以通过模板设置或通过导出环境变量（例如，export SECURITY_TOKEN=value）。 assume_role TencentCloudAccessRole 提供此块时，Packer 将尝试使用提供的凭据进行假定角色。 role_arn string 要假定的角色的 ARN。可以从 TENCENTCLOUD_ASSUME_ROLE_ARN 获取。 session_name string 进行 AssumeRole 调用时要使用的会话名称。可以从 TENCENTCLOUD_ASSUME_ROLE_SESSION_NAME 获取。 session_duration int 进行 AssumeRole 调用时的会话持续时间（以秒为单位）。其值范围为 0 到 43200（秒），默认值为 7200 秒。可以从 TENCENTCLOUD_ASSUME_ROLE_SESSION_DURATION 获取。 profile string 凭据配置文件中的配置文件名称。也可以从 TENCENTCLOUD_PROFILE 环境变量获取。如果未设置，则默认使用 tccli configure 创建的默认配置文件。如果未设置，则默认为 default。 shared_credentials_dir string 共享凭据的目录。也可以从 TENCENTCLOUD_SHARED_CREDENTIALS_DIR 环境变量获取。如果未设置，则默认为 ~/.</description>
    </item>
    <item>
      <title>Packer使用说明</title>
      <link>https://gitmkn.github.io/index/packer_use/</link>
      <pubDate>Fri, 24 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://gitmkn.github.io/index/packer_use/</guid>
      <description>前置条件 准备AKSK，参考访问密钥管理 安装packer，参考Packer安装 定义模板 TODO 创建自定义镜像 TODO </description>
    </item>
    <item>
      <title>Packer插件开发</title>
      <link>https://gitmkn.github.io/index/packer_plugin_dev/</link>
      <pubDate>Thu, 23 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://gitmkn.github.io/index/packer_plugin_dev/</guid>
      <description>1、安装Packer 参照安装pcaker 2、fork代码及拉取代码 fork代码 拉取代码 git clone git@github.com:gitmkn/packer-plugin-tencentcloud.git 创建分支，开发代码 3、代码目录介绍 . ├── builder # 构建cvm镜像 │ └── tencentcloud # 提供商 │ ├── cvm # 产品 │ │ ├── access_config.go # 基础数据配置，aksk等 │ │ ├── access_config.hcl2spec.go # 基础数据配置支持hcl文件 │ │ ├── access_config_test.go # 测试用例 │ │ ├── artifact.go # 构建镜像编排文件 │ │ ├── builder.go # 定义构建产物 │ │ ├── builder.hcl2spec.go # 定义构建产物支持hcl │ │ ├── client.go # 创建API clent │ │ ├── common.</description>
    </item>
    <item>
      <title>Packer安装</title>
      <link>https://gitmkn.github.io/index/packer_install/</link>
      <pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://gitmkn.github.io/index/packer_install/</guid>
      <description>安装Packer 1. 下载Pakcer安装包 wget https://releases.hashicorp.com/packer/1.9.4/packer_1.9.4_linux_amd64.zip 2. 解压Packer安装包 unzip packer_1.9.4_linux_amd64.zip 3. 安装Packer到环境变量目录 sudo mv packer /usr/local/bin 4. 查看Packer版本号，验证安装状态 packer -v </description>
    </item>
    <item>
      <title>Packer介绍</title>
      <link>https://gitmkn.github.io/index/packer/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://gitmkn.github.io/index/packer/</guid>
      <description>Packer是一款由HashiCorp开发的开源工具，用于自动化地创建相同的机器镜像。它可以帮助开发者和运维人员快速、可靠地构建和管理多个平台上的镜像，如Amazon Web Services、Microsoft Azure、Google Cloud Platform、Docker和VirtualBox等。
Packer使用JSON格式的配置文件来定义镜像的构建过程，通过插件机制支持各种操作系统、配置管理工具和云服务提供商。它可以自动化地执行各种任务，如安装软件、配置系统、打包镜像等，从而实现快速、可靠的镜像构建和部署。
Packer的主要优点包括：
多平台支持：Packer支持多种平台，包括云平台、虚拟化平台和容器平台等。
自定义镜像：Packer可以根据用户的需求自定义镜像，包括安装软件、配置系统、打包镜像等。
自动化构建：Packer可以自动化地执行各种任务，从而实现快速、可靠的镜像构建和部署。
插件机制：Packer支持插件机制，可以扩展其功能，如支持新的操作系统、配置管理工具和云服务提供商等。
总之，Packer是一款非常实用的自动化构建工具，可以帮助用户快速、可靠地构建和管理多个平台上的镜像。它的灵活性和可扩展性使得它成为了众多开发者和运维人员的首选工具。</description>
    </item>
    <item>
      <title>Terraform介绍</title>
      <link>https://gitmkn.github.io/index/terraform/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://gitmkn.github.io/index/terraform/</guid>
      <description>Terraform是一款开源的资源编排工具，由HashiCorp公司推出，主要用于自动化基础设施的部署和管理。它支持多种云服务提供商，如阿里云、腾讯云、华为云、AWS、Azure、百度云等，允许用户使用统一的编排工具，通过一套语法实现对多个云平台、多种层级（如IaaS，PaaS）资源的统一管理。
Terraform的核心层是命令行工具，负责读取配置文件、资源状态文件管理、分析资源关系、绘制资源图以及根据依赖关系创建资源。插件层包括Provider和Provisioner两部分，Provider负责与外界API的集成，进行初始化以及与外界API的认证；Provisioner则在资源创建或删除完成后执行一些脚本。
Terraform使用HashiCorp Configuration Language（HCL）编写代码，这是一种声明式语言，允许程序员描述基础设施应如何配置，而无需了解实施的具体步骤和细节。此外，Terraform还支持使用模块（module）功能，将高度可重用的代码封装成模块，方便其他人使用。
总之，Terraform是一款功能强大的基础设施编排工具，能够帮助用户自动化部署和管理云资源，提高工作效率。</description>
    </item>
  </channel>
</rss>
